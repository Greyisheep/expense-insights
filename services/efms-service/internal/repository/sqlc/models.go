// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type StatementStatus string

const (
	StatementStatusPendingFileConfirmation StatementStatus = "pending_file_confirmation"
	StatementStatusProcessing              StatementStatus = "processing"
	StatementStatusCompleted               StatementStatus = "completed"
	StatementStatusFailed                  StatementStatus = "failed"
	StatementStatusArchived                StatementStatus = "archived"
)

func (e *StatementStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatementStatus(s)
	case string:
		*e = StatementStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StatementStatus: %T", src)
	}
	return nil
}

type NullStatementStatus struct {
	StatementStatus StatementStatus `json:"statement_status"`
	Valid           bool            `json:"valid"` // Valid is true if StatementStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatementStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StatementStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatementStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatementStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatementStatus), nil
}

type UploadStatus string

const (
	UploadStatusPending             UploadStatus = "pending"
	UploadStatusUploaded            UploadStatus = "uploaded"
	UploadStatusStatementRegistered UploadStatus = "statement_registered"
	UploadStatusError               UploadStatus = "error"
)

func (e *UploadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UploadStatus(s)
	case string:
		*e = UploadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UploadStatus: %T", src)
	}
	return nil
}

type NullUploadStatus struct {
	UploadStatus UploadStatus `json:"upload_status"`
	Valid        bool         `json:"valid"` // Valid is true if UploadStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUploadStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UploadStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UploadStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUploadStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UploadStatus), nil
}

type Statement struct {
	SubmissionID       uuid.UUID       `json:"submission_id"`
	UserID             uuid.UUID       `json:"user_id"`
	UploadID           uuid.UUID       `json:"upload_id"`
	Description        sql.NullString  `json:"description"`
	StatementDate      sql.NullTime    `json:"statement_date"`
	BankName           sql.NullString  `json:"bank_name"`
	Status             StatementStatus `json:"status"`
	ProcessingProgress sql.NullInt32   `json:"processing_progress"`
	ErrorMessage       sql.NullString  `json:"error_message"`
	InsightsAvailable  bool            `json:"insights_available"`
	CreatedAt          time.Time       `json:"created_at"`
	UpdatedAt          time.Time       `json:"updated_at"`
	UpdatedBy          uuid.NullUUID   `json:"updated_by"`
}

type StatementTag struct {
	ID          uuid.UUID `json:"id"`
	StatementID uuid.UUID `json:"statement_id"`
	Tag         string    `json:"tag"`
	CreatedAt   time.Time `json:"created_at"`
}

type Upload struct {
	ID            uuid.UUID      `json:"id"`
	UserID        uuid.UUID      `json:"user_id"`
	FileName      string         `json:"file_name"`
	ContentType   string         `json:"content_type"`
	Status        UploadStatus   `json:"status"`
	StoragePath   sql.NullString `json:"storage_path"`
	SizeBytes     sql.NullInt64  `json:"size_bytes"`
	ErrorMessage  sql.NullString `json:"error_message"`
	PresignExpiry sql.NullTime   `json:"presign_expiry"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}
