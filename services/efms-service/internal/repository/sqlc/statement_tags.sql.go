// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: statement_tags.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addTagToStatement = `-- name: AddTagToStatement :one
INSERT INTO statement_tags (
    statement_id,
    tag
) VALUES (
    $1, $2
) RETURNING id, statement_id, tag, created_at
`

type AddTagToStatementParams struct {
	StatementID uuid.UUID `json:"statement_id"`
	Tag         string    `json:"tag"`
}

func (q *Queries) AddTagToStatement(ctx context.Context, arg AddTagToStatementParams) (StatementTag, error) {
	row := q.queryRow(ctx, q.addTagToStatementStmt, addTagToStatement, arg.StatementID, arg.Tag)
	var i StatementTag
	err := row.Scan(
		&i.ID,
		&i.StatementID,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}

const getTagsForStatement = `-- name: GetTagsForStatement :many
SELECT tag FROM statement_tags
WHERE statement_id = $1
ORDER BY tag
`

func (q *Queries) GetTagsForStatement(ctx context.Context, statementID uuid.UUID) ([]string, error) {
	rows, err := q.query(ctx, q.getTagsForStatementStmt, getTagsForStatement, statementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStatementsByTagAndUser = `-- name: ListStatementsByTagAndUser :many
SELECT s.submission_id, s.statement_date, s.bank_name, s.status, s.created_at AS upload_date, s.insights_available
FROM statements s
JOIN statement_tags st ON s.submission_id = st.statement_id
WHERE s.user_id = $1 AND st.tag = $2
AND ($3::varchar IS NULL OR s.status = $3::varchar)
AND ($4::date IS NULL OR s.statement_date >= $4::date)
AND ($5::date IS NULL OR s.statement_date <= $5::date)
ORDER BY s.created_at DESC
LIMIT $6 OFFSET $7
`

type ListStatementsByTagAndUserParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Tag     string    `json:"tag"`
	Column3 string    `json:"column_3"`
	Column4 time.Time `json:"column_4"`
	Column5 time.Time `json:"column_5"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

type ListStatementsByTagAndUserRow struct {
	SubmissionID      uuid.UUID       `json:"submission_id"`
	StatementDate     sql.NullTime    `json:"statement_date"`
	BankName          sql.NullString  `json:"bank_name"`
	Status            StatementStatus `json:"status"`
	UploadDate        time.Time       `json:"upload_date"`
	InsightsAvailable bool            `json:"insights_available"`
}

func (q *Queries) ListStatementsByTagAndUser(ctx context.Context, arg ListStatementsByTagAndUserParams) ([]ListStatementsByTagAndUserRow, error) {
	rows, err := q.query(ctx, q.listStatementsByTagAndUserStmt, listStatementsByTagAndUser,
		arg.UserID,
		arg.Tag,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStatementsByTagAndUserRow{}
	for rows.Next() {
		var i ListStatementsByTagAndUserRow
		if err := rows.Scan(
			&i.SubmissionID,
			&i.StatementDate,
			&i.BankName,
			&i.Status,
			&i.UploadDate,
			&i.InsightsAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllTagsFromStatement = `-- name: RemoveAllTagsFromStatement :exec
DELETE FROM statement_tags
WHERE statement_id = $1
`

func (q *Queries) RemoveAllTagsFromStatement(ctx context.Context, statementID uuid.UUID) error {
	_, err := q.exec(ctx, q.removeAllTagsFromStatementStmt, removeAllTagsFromStatement, statementID)
	return err
}

const removeTagFromStatement = `-- name: RemoveTagFromStatement :exec
DELETE FROM statement_tags
WHERE statement_id = $1 AND tag = $2
`

type RemoveTagFromStatementParams struct {
	StatementID uuid.UUID `json:"statement_id"`
	Tag         string    `json:"tag"`
}

func (q *Queries) RemoveTagFromStatement(ctx context.Context, arg RemoveTagFromStatementParams) error {
	_, err := q.exec(ctx, q.removeTagFromStatementStmt, removeTagFromStatement, arg.StatementID, arg.Tag)
	return err
}
