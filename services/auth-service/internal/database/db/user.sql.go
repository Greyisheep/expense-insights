// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, password_hash, first_name, last_name, phone_number, status, role
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, email, password_hash, first_name, last_name, phone_number, created_at, updated_at, last_login_at, status, role
`

type CreateUserParams struct {
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	Status       string         `json:"status"`
	Role         string         `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Status,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.Status,
		&i.Role,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, first_name, last_name, phone_number, created_at, updated_at, last_login_at, status, role FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.Status,
		&i.Role,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, first_name, last_name, phone_number, created_at, updated_at, last_login_at, status, role FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.Status,
		&i.Role,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  first_name = $2,
  last_name = $3,
  phone_number = $4,
  status = $5,
  role = $6,
  password_hash = $7, -- Only update password if provided
  last_login_at = $8, -- Allow updating last login
  updated_at = now()
WHERE id = $1
RETURNING id, email, password_hash, first_name, last_name, phone_number, created_at, updated_at, last_login_at, status, role
`

type UpdateUserParams struct {
	ID           uuid.UUID      `json:"id"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	Status       string         `json:"status"`
	Role         string         `json:"role"`
	PasswordHash string         `json:"password_hash"`
	LastLoginAt  sql.NullTime   `json:"last_login_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Status,
		arg.Role,
		arg.PasswordHash,
		arg.LastLoginAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.Status,
		&i.Role,
	)
	return i, err
}
