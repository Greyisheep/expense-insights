// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
  user_id, token_hash, expires_at
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, token_hash, expires_at, created_at, updated_at, revoked, replaced_by
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	TokenHash string    `json:"token_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.queryRow(ctx, q.createRefreshTokenStmt, createRefreshToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Revoked,
		&i.ReplacedBy,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :execrows
DELETE FROM refresh_tokens
WHERE expires_at <= now() OR revoked = true
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) (int64, error) {
	result, err := q.exec(ctx, q.deleteExpiredRefreshTokensStmt, deleteExpiredRefreshTokens)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteRefreshTokensByUserID = `-- name: DeleteRefreshTokensByUserID :execrows
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deleteRefreshTokensByUserIDStmt, deleteRefreshTokensByUserID, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getRefreshTokenByID = `-- name: GetRefreshTokenByID :one
SELECT id, user_id, token_hash, expires_at, created_at, updated_at, revoked, replaced_by FROM refresh_tokens
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRefreshTokenByID(ctx context.Context, id uuid.UUID) (RefreshToken, error) {
	row := q.queryRow(ctx, q.getRefreshTokenByIDStmt, getRefreshTokenByID, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Revoked,
		&i.ReplacedBy,
	)
	return i, err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT id, user_id, token_hash, expires_at, created_at, updated_at, revoked, replaced_by FROM refresh_tokens
WHERE token_hash = $1 AND revoked = false AND expires_at > now() LIMIT 1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.queryRow(ctx, q.getRefreshTokenByTokenStmt, getRefreshTokenByToken, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Revoked,
		&i.ReplacedBy,
	)
	return i, err
}

const getRefreshTokensByUserID = `-- name: GetRefreshTokensByUserID :many
SELECT id, user_id, token_hash, expires_at, created_at, updated_at, revoked, replaced_by FROM refresh_tokens
WHERE user_id = $1 AND revoked = false AND expires_at > now()
ORDER BY created_at DESC
`

func (q *Queries) GetRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.query(ctx, q.getRefreshTokensByUserIDStmt, getRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TokenHash,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Revoked,
			&i.ReplacedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked = true, updated_at = now()
WHERE id = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.revokeRefreshTokenStmt, revokeRefreshToken, id)
	return err
}

const setRefreshTokenReplacedBy = `-- name: SetRefreshTokenReplacedBy :exec
UPDATE refresh_tokens
SET replaced_by = $2, updated_at = now()
WHERE id = $1
`

type SetRefreshTokenReplacedByParams struct {
	ID         uuid.UUID     `json:"id"`
	ReplacedBy uuid.NullUUID `json:"replaced_by"`
}

func (q *Queries) SetRefreshTokenReplacedBy(ctx context.Context, arg SetRefreshTokenReplacedByParams) error {
	_, err := q.exec(ctx, q.setRefreshTokenReplacedByStmt, setRefreshTokenReplacedBy, arg.ID, arg.ReplacedBy)
	return err
}
