version: "2"
sql:
  - engine: "postgresql"
    # Tell sqlc to read the schema from our migration files
    schema: "scripts/migrations"
    # Specify where our SQL query files will live
    queries: "internal/database/queries"
    gen:
      go:
        # Specify the output package for the generated Go code
        package: "db"
        # Specify the output directory for the generated Go code
        out: "internal/database/db"
        # Enable sql.Null* types for nullable columns (good practice)
        sql_package: "database/sql"
        # Emit code that uses pointers for nullable columns where possible
        emit_pointers_for_null_types: true
        # Emit explicit type names for prepared queries (recommended)
        emit_prepared_queries: true
        # Emit interface for the generated Queries struct (good for mocking/testing)
        emit_interface: true
        # Emit code compatible with json.Marshal (useful for API responses)
        emit_json_tags: true
        # Use the types defined in our model packages where appropriate
        overrides:
          - go_type: "github.com/google/uuid.UUID"
            db_type: "uuid"
          - go_type: "github.com/google/uuid.NullUUID"
            db_type: "uuid"
            nullable: true
          # Map our internal user model if column names match exactly
          # Note: This might require adjusting column names in queries if they differ from struct fields
          # - go_type: "github.com/Greyisheep/expense-insights/auth-service/internal/user.User"
          #   # We can specify columns or let sqlc infer if names match
          #   # columns: ["id", "email", "password_hash", "first_name", "last_name", "phone_number", "created_at", "updated_at", "last_login_at", "status", "role"]
          #   # If column names in the DB differ from Go struct field names (after case conversion),
          #   # you might need to rename them in the query using AS, e.g., SELECT user_id AS ID FROM users...
          # Remove the user.User override for now 