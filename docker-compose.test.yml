version: '3.8'

services:
  postgres-auth-test:
    image: postgres:15-alpine
    container_name: expense_insights_postgres_auth_test
    environment:
      POSTGRES_USER: auth_test_user
      POSTGRES_PASSWORD: auth_test_password
      POSTGRES_DB: auth_test_db
    ports:
      - "127.0.0.1:5434:5432" # Different host port for test DB
    volumes:
      - postgres_auth_test_data:/var/lib/postgresql/data
    networks:
      - expense-insights-test-net

  auth-service-test:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      target: builder # Use the builder stage which has Go and source code
    container_name: expense_insights_auth_service_test
    depends_on:
      - postgres-auth-test
    environment:
      # Environment variables for tests to connect to the test database
      DB_HOST: postgres-auth-test
      DB_PORT: 5432 # Internal port for PostgreSQL
      DB_USER: auth_test_user
      DB_PASSWORD: auth_test_password
      DB_NAME: auth_test_db
      SSL_MODE: disable
      LOG_LEVEL: debug
    working_dir: /app # Source code is in /app in the builder stage
    # The command to run your tests.
    # This assumes your tests can be run from the /app directory and migrations are handled by tests or a setup script.
    # The entrypoint script from the original Dockerfile is not used here because we override the command.
    # You might need to run migrations before tests.
    command: >
      sh -c "
        echo 'Waiting for test database to be ready...';
        while ! nc -z postgres-auth-test 5432; do sleep 0.1; done;
        echo 'Test database ready.';
        echo 'Running migrations for test database...';
        migrate -path ./internal/db/migration -database \"postgresql://auth_test_user:auth_test_password@postgres-auth-test:5432/auth_test_db?sslmode=disable\" -verbose up;
        echo 'Migrations finished.';
        echo 'Running tests...';
        go test -v -coverprofile=coverage.out ./...
      "
    networks:
      - expense-insights-test-net
    volumes:
      # Mount coverage reports out if needed
      - ./services/auth-service/coverage:/app/coverage

volumes:
  postgres_auth_test_data:
    driver: local

networks:
  expense-insights-test-net:
    driver: bridge 